<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>剑指offer on Eric&#39;s Blog</title>
    <link>https://zg999.github.io/tags/%E5%89%91%E6%8C%87offer/</link>
    <description>Recent content in 剑指offer on Eric&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 May 2020 13:10:45 +0800</lastBuildDate>
    
	<atom:link href="https://zg999.github.io/tags/%E5%89%91%E6%8C%87offer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>10 1.斐波那契数列</title>
      <link>https://zg999.github.io/post/10-1/</link>
      <pubDate>Thu, 28 May 2020 13:10:45 +0800</pubDate>
      
      <guid>https://zg999.github.io/post/10-1/</guid>
      <description>题目描述： 写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：
F(0) = 0, F(1) = 1
F(N) = F(N - 1) + F(N - 2), 其中 N &amp;gt; 1.
斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。
答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
 解题思路： 方法一：直接递归 方法二：动态规划 状态定义： 设 dp 为一维数组，其中 dp[i] 的值代表 斐波那契数列第 i 个数字 。
转移方程： dp[i+1]=dp[i]+dp[i−1] ，即对应数列定义f(n+1)=f(n)+f(n−1) ；
初始状态： dp[0]=0,dp[1]=1 ，即初始化前两个数字；
返回值： dp[n] ，即斐波那契数列的第 n 个数字。
Java代码： public class Solution {public int fib(int n) {int[] dp = new int[n+1];if(n == 0)return 0;dp[0] = 0;dp[1] = 1;for(int i = 1; i &amp;lt; n; i++){dp[i+1] = dp[i] + dp[i-1];dp[i+1] = dp[i+1] % 1000000007;}return dp[n];}} 方法三：在动态规划的基础上优化空间复杂度 由于 dp 列表第 i 项只与第 i−1 和第 i−2 项有关，因此只需要初始化三个整形变量 sum, a, b ，利用辅助变量 sum 使 a, b两数字交替前进即可 （具体实现见代码） 。 节省了 dp 列表空间，因此空间复杂度降至 O(1) 。 注： 为什么返回a呢？因为当n=0时不进入循环，所以直接返回a。（其实单独讨论n=0也可以），写几个式子一看就明白了</description>
    </item>
    
    <item>
      <title>06.从尾到头打印链表</title>
      <link>https://zg999.github.io/post/06.%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 27 May 2020 13:03:58 +0800</pubDate>
      
      <guid>https://zg999.github.io/post/06.%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</guid>
      <description>题目描述： 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。
 示例 1：
输入：head = [1,3,2] 输出：[2,3,1] 限制：
0 &amp;lt;= 链表长度 &amp;lt;= 10000
 解题思路： 后进先出栈，秒出。
 #Java代码：
import java.util.*;public class Solution {public int[] reversePrint(ListNode head) {LinkedList&amp;lt;Integer&amp;gt; stack = new LinkedList&amp;lt;&amp;gt;();ListNode p = head;int len = 0;while(p != null){stack.push(p.val);len++;p = p.next;}int[] ans = new int[len];for(int i = 0; !stack.isEmpty(); i++){ans[i] = stack.pop();}return ans;}}class ListNode{int val;ListNode next;ListNode(int x){val = x;}}</description>
    </item>
    
    <item>
      <title>05.替换空格</title>
      <link>https://zg999.github.io/post/05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</link>
      <pubDate>Wed, 27 May 2020 12:59:38 +0800</pubDate>
      
      <guid>https://zg999.github.io/post/05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</guid>
      <description>题目描述： 请实现一个函数，把字符串 s 中的每个空格替换成&amp;rdquo;%20&amp;rdquo;。
示例 1：
输入：s = &amp;ldquo;We are happy.&amp;rdquo; 输出：&amp;ldquo;We%20are%20happy.&amp;rdquo;
限制：
0 &amp;lt;= s 的长度 &amp;lt;= 10000
 解题思路： 新建一个StringBuilder，遍历给定字符串s，如果遇到空格，就append一个“%20”，否则就直接append上当前s的字符。
Java代码： class Solution {public String replaceSpace(String s) {StringBuilder str = new StringBuilder();for(int i = 0; i &amp;lt; s.length(); i++){if(s.charAt(i) != &#39; &#39;)str.append(s.charAt(i));elsestr.append(&amp;quot;%20&amp;quot;);}return str.toString();}}</description>
    </item>
    
    <item>
      <title>二维数组中的查找</title>
      <link>https://zg999.github.io/post/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Tue, 26 May 2020 20:10:42 +0800</pubDate>
      
      <guid>https://zg999.github.io/post/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</guid>
      <description>题目描述： 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序， 每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
 解题思路： 这个二维数组实际上是一个方阵，并且右下角的数永远大于左上角的数。遍历数组太慢我们不考虑。
可以考虑从二维数组的右上角开始比较。因为从右上角开始考虑只有两种选择：当前数太大就左移减小，当前数太小就右移增大。
这个循环的结束条件有两个：①若找到了target，直接返回true。②若走到了数组边界还没找到target，就返回false。
 Java代码： import java.util.*;public class Solution {public boolean Find(int target, int [][] array) {//行数int rowlen = array.length;//列数int collen = array[0].length;int i = 0;int j = collen - 1;while(i &amp;lt; rowlen &amp;amp;&amp;amp; j &amp;gt;= 0){if(array[i][j] &amp;lt; target){i++;}else if(array[i][j] &amp;gt; target){j--;}elsereturn true;}return false;}}</description>
    </item>
    
  </channel>
</rss>