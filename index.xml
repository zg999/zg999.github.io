<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eric&#39;s Blog</title>
    <link>https://zg999.github.io/</link>
    <description>Recent content on Eric&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jun 2020 13:45:38 +0800</lastBuildDate>
    
	<atom:link href="https://zg999.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java的BigInteger类</title>
      <link>https://zg999.github.io/post/java%E7%9A%84biginteger%E7%B1%BB/</link>
      <pubDate>Tue, 23 Jun 2020 13:45:38 +0800</pubDate>
      
      <guid>https://zg999.github.io/post/java%E7%9A%84biginteger%E7%B1%BB/</guid>
      <description>位置：java.math.BigInteger
作用：提供高精度整型数据类型及相关操作
一、基本介绍 BigInteger为不可变的任意精度的整数（对象创建后无法改变，每次运算均会产生一个新的对象）。
所有操作中，都以二进制补码形式表示 BigInteger（同Java 的基本整数类型）。
提供所有 Java 的基本整数操作符（* / + -等等）的对应物（一堆函数）。
**提供 java.lang.Math 的所有相关方法**，此外还提供模算术、GCD 计算（最大公约数）、质数测试、素数生成、位操作以及一些其他操作。
**算术运算、逐位逻辑运算**的语义完全模仿 Java 整数算术运算符的语义。
**位移操作**允许产生负位移距离，且忽略了无符号的右位移运算符（&amp;raquo;&amp;gt;）。
**比较操作**执行有符号的整数比较，类似于 Java 的关系运算符和相等性运算符执行的比较。
**模算术操**作用来计算余数、求幂和乘法可逆元。这些方法始终返回非负结果，范围在 0 和 (modulus - 1)（包括）之间。
**位操作**对其操作数的二进制补码表示形式的单个位进行操作。如有必要，操作数会通过扩展符号来包含指定的位。单一位操作不能产生与正在被操作的 BigInteger 符号不同的 BigInteger，因为它们仅仅影响单个位，并且此类提供的“无穷大词大小”抽象可保证在每个 BigInteger 前存在无穷多的“虚拟符号位”数。
当为任何输入参数传递 null 对象引用时，此类中的所有方法和构造方法都将抛出 NullPointerException。
二、字段 static BigInteger ONE　//BigInteger常量1 static BigInteger TEN //BigInteger常量10 static BigInteger ZERO //BigInteger常量0 三、生成BigInteger对象 构造函数 BigInteger( byte[] val ) //将包含BigInteger的二进制补码表示形式的byte数组转换为BigInteger BigInteger( int signum , byte[] magnitude )　//byte数组同上一条，signum表示符号：1为正，-1为负，0为零（signum为0时byte数组不可包含非零字节） BigInteger( int bitLength , int certainty ,Random rnd )　//生成BigInteger伪随机数，它可能是（概率不小于1 - 1/2certainty）一个具有指定 bitLength 的素数 BigInteger( int numBits , Random rnd )　//生成BigInteger伪随机数，其值均匀分布于[ 0 , 2numBits - 1 ) BigInteger( String val )　//将 BigInteger 的十进制字符串表示形式转换为 BigInteger（可包含前导负号） BigInteger( String val ,int radix )　//将指定基数（进制）的 BigInteger 的字符串表示形式转换为 BigInteger 四、常(suo)用(you)方法 算术运算（+ - * / % mod） BigInteger add( BigInteger val ) //返回其值为(this + val)的BigInteger BigInteger subtract( BigInteger val ) //返回其值为(this - val)的BigInteger BigInteger negate()　//返回其值是(-this)的BigInteger BigInteger multiply( BigInteger val )　//返回其值为(this * val)的BigInteger BigInteger divide( BigInteger val )　//返回其值为(this / val)的BigInteger BigInteger remainder( BigInteger val )　//返回其值为(this % val)的BigInteger BigInteger[] divideAndRemainder( BigInteger val )　//返回包含(this / val)后跟(this % val)的两个BigInteger的数组 BigInteger mod( BigInteger m )　//返回其值为(this mod m)的BigInteger（与%不同，其值永远为正，下同） BigInteger modInverse( BigInteger m ) //返回其值为(this-1 mod m)的BigInteger BigInteger modPow( BigInteger exponent , BigInteger m ) 返回其值为(thisexponent mod m)的BigInteger（exponent可以为负） 关系运算（== &amp;gt; &amp;gt;= &amp;lt; &amp;lt;= !</description>
    </item>
    
    <item>
      <title>算法思想</title>
      <link>https://zg999.github.io/post/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/</link>
      <pubDate>Fri, 29 May 2020 13:37:53 +0800</pubDate>
      
      <guid>https://zg999.github.io/post/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/</guid>
      <description>学习数据结构和算法的框架思维 一、数据结构的存储方式 数据结构的存储方式只有两种：数组（顺序存储）和链表（链式存储）。
这句话怎么理解，不是还有散列表、栈、队列、堆、树、图等等各种数据结构吗？
我们分析问题，一定要有递归的思想，自顶向下，从抽象到具体。你上来就列出这么多，那些都属于「上层建筑」，而数组和链表才是「结构基础」。因为那些多样化的数据结构，究其源头，都是在链表或者数组上的特殊操作，API 不同而已。
比如说「队列」、「栈」这两种数据结构既可以使用链表也可以使用数组实现。用数组实现，就要处理扩容缩容的问题；用链表实现，没有这个问题，但需要更多的内存空间存储节点指针。
「图」的两种表示方法，邻接表就是链表，邻接矩阵就是二维数组。邻接矩阵判断连通性迅速，并可以进行矩阵运算解决一些问题，但是如果图比较稀疏的话很耗费空间。邻接表比较节省空间，但是很多操作的效率上肯定比不过邻接矩阵。
「散列表」就是通过散列函数把键映射到一个大数组里。而且对于解决散列冲突的方法，拉链法需要链表特性，操作简单，但需要额外的空间存储指针；线性探查法就需要数组特性，以便连续寻址，不需要指针的存储空间，但操作稍微复杂些。
「树」，用数组实现就是「堆」，因为「堆」是一个完全二叉树，用数组存储不需要节点指针，操作也比较简单；用链表实现就是很常见的那种「树」，因为不一定是完全二叉树，所以不适合用数组存储。为此，在这种链表「树」结构之上，又衍生出各种巧妙的设计，比如二叉搜索树、AVL 树、红黑树、区间树、B 树等等，以应对不同的问题。
了解 Redis 数据库的朋友可能也知道，Redis 提供列表、字符串、集合等等几种常用数据结构，但是对于每种数据结构，底层的存储方式都至少有两种，以便于根据存储数据的实际情况使用合适的存储方式。
综上，数据结构种类很多，甚至你也可以发明自己的数据结构，但是底层存储无非数组或者链表，二者的优缺点如下：
数组由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。
链表因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。
二、数据结构的基本操作 对于任何数据结构，其基本操作无非遍历 + 访问，再具体一点就是：增删查改。
数据结构种类很多，但它们存在的目的都是在不同的应用场景，尽可能高效地增删查改。话说这不就是数据结构的使命么？
如何遍历 + 访问？我们仍然从最高层来看，各种数据结构的遍历 + 访问无非两种形式：线性的和非线性的。
线性就是 for/while 迭代为代表，非线性就是递归为代表。再具体一步，无非以下几种框架：
数组遍历框架，典型的线性迭代结构：
void traverse(int[] arr) { for (int i = 0; i &amp;lt; arr.length; i++) { // 迭代访问 arr[i]  } } 链表遍历框架，兼具迭代和递归结构：
/* 基本的单链表节点 */ class ListNode { int val; ListNode next; } void traverse(ListNode head) { for (ListNode p = head; p !</description>
    </item>
    
    <item>
      <title>Java取余和取模的区别</title>
      <link>https://zg999.github.io/post/java%E5%8F%96%E4%BD%99%E5%92%8C%E5%8F%96%E6%A8%A1%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Wed, 27 May 2020 11:38:27 +0800</pubDate>
      
      <guid>https://zg999.github.io/post/java%E5%8F%96%E4%BD%99%E5%92%8C%E5%8F%96%E6%A8%A1%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>取模与取余的区别 对于整型数a，b来说，取模运算或者求余运算的方法都是：
1.求 整数商： c = a/b;
2.计算模或者余数： r = a - c * b
求模运算和求余运算在第一步不同: 取余运算在取c的值时，向0 方向舍入(fix()函数)；而取模运算在计算c的值时，向负无穷方向舍入(floor()函数)。
例如计算：-7 Mod 4
那么：a = -7；b = 4；
第一步：求整数商c，如进行求模运算c = -2（向负无穷方向舍入），求余c = -1（向0方向舍入）；
第二步：计算模和余数的公式相同，但因c的值不同，求模时r = 1，求余时r = -3。
归纳：当a和b符号一致时，求模运算和求余运算所得的c的值一致，因此结果一致。
当符号不一致时，结果不一样。求模运算结果的符号和b一致，求余运算结果的符号和a一致。
另外各个环境下%运算符的含义不同，比如c/c++，java 为取余，而python则为取模。
Java程序示例：
	public static void main(String[] args) {System.out.println(&amp;quot;-3,2取模&amp;quot;+Math.floorMod(-3,2));System.out.println(&amp;quot;-3,2取余&amp;quot;+ -3%2);System.out.println(&amp;quot;3,-2取模&amp;quot;+Math.floorMod(3,-2));System.out.println(&amp;quot;3,2取余&amp;quot;+ 3%-2);}结果:
-3,2取模=1-3,2取余=-13,-2取模=-13,2取余=1</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zg999.github.io/post/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zg999.github.io/post/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>本文就来探究几个最常用的二分查找场景：寻找一个数、寻找左侧边界、寻找右侧边界。
而且，我们就是要深入细节，比如while循环中的不等号是否应该带等号，mid 是否应该加一等等。分析这些细节的差异以及出现这些差异的原因，保证你能灵活准确地写出正确的二分查找算法。
一、二分查找的框架 int binarySearch(int[] nums, int target) {int left = 0, right = ...;while(...) {int mid = (right + left) / 2;if (nums[mid] == target) {...} else if (nums[mid] &amp;lt; target) {left = ...} else if (nums[mid] &amp;gt; target) {right = ...}}return ...;}分析二分查找的一个技巧是：不要出现 else，而是把所有情况用 else if 写清楚，这样可以清楚地展现所有细节。本文都会使用 else if，旨在讲清楚，读者理解后可自行简化。
其中&amp;hellip;标记的部分，就是可能出现细节问题的地方，当你见到一个二分查找的代码时，首先注意这几个地方。后文用实例分析这些地方能有什么样的变化。
另外声明一下，计算 mid 时需要技巧防止溢出，建议写成: mid = left + (right - left) / 2，本文暂时忽略这个问题。</description>
    </item>
    
  </channel>
</rss>